// // // Write an implementation of a function that flattens a nested Object. The method takes an Object and returns a new flattened Object where every nested key-value pair is converter to a flat level i.e child key is concatenated to a parent key with a dot between them.

// // // Below is the sample

// // // *input*

// // <pre><code class="javascript">
// // {
// //   "keyOne": "value One",
// //   "keyTwo": "value Two",
// //   "keyThree": "value Three",
// //   "keyFour": {
// //     "keyA": true,
// //     "keyB": false,
// //     "keyC": {
// //       "keyCOne": "key C one value",
// //       "keyCTwo": "key C two value",
// //       "keyCThree": 1234
// //     }
// //   }
// // }

// // </code></pre>

// // *Output:* 

// // <pre><code class="javascript">
// // {
// //   "keyOne": "value One",
// //   "keyTwo": "value Two",
// //   "keyThree":"value Three",
// //   "keyFour.keyA": true,
// //   "keyFour.keyB": false,
// //   "keyFour.keyC.keyCOne": "key C one value",
// //   "keyFour.keyC.keyCTwo": "key C two value",
// //   "keyFour.keyC.keyCThree": 1234
// // }
// // </code></pre>


// // // Note: Do not modify the original Object, return a new Object.

// const a = {
//       "keyOne": "value One",
//       "keyTwo": "value Two",
//       "keyThree": "value Three",
//       "keyFour": {
//         "keyA": true,
//         "keyB": false,
//         "keyC": {
//           "keyCOne": "key C one value",
//           "keyCTwo": "key C two value",
//           "keyCThree": 1234
//         }
//       }
//     }
// const b ={
//     "keyC": {
//         "keyCOne": "key C one value",
//         "keyCTwo": "key C two value",
//         "keyCThree": 1234
//       }
//     }



//     function Recursive(obj,Key,result){
     
//       for(let i=0;i<Object.keys(obj).length;i++) {

          
//           const newKey = Key + `.${Object.keys(obj)[i]}`;
//           if(typeof Object.values(obj)[i]==='object')
//         {
//             Recursive(Object.values(obj)[i],newKey,result)
//         }
//         else{
//             result[newKey] = Object.values(obj)[i];
//         }

//       }
     
//     return result
     
//     }

   




// const ans = Recursive(a,"",{})

// console.log(ans)

// // console.log(typeof(b["keyC"]));




// My solution 
/*

function Recursive(obj, Key, result) {
    for (let i = 0; i < Object.keys(obj).length; i++) {
        const currentKey = Object.keys(obj)[i];
        const newKey = Key ? `${Key}.${currentKey}` : currentKey; // Avoid leading "."

        if (typeof Object.values(obj)[i] === 'object' && Object.values(obj)[i] !== null) {
            // Recursively process nested objects
            Recursive(Object.values(obj)[i], newKey, result);
        } else {
            // Assign flat key-value pair
            result[newKey] = Object.values(obj)[i];
        }
    }
    return result;
}

// Example usage
const a = {
    keyOne: "value One",
    keyTwo: "value Two",
    keyThree: "value Three",
    keyFour: {
        keyA: true,
        keyB: false,
        keyC: {
            keyCOne: "key C one value",
            keyCTwo: "key C two value",
            keyCThree: 1234
        }
    }
};

const ans = Recursive(a, "", {});

console.log(ans);

*/